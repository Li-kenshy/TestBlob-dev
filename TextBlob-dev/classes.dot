digraph "classes" {
rankdir=BT
charset="utf-8"
"textblob.blob.BaseBlob" [color="black", fontcolor="black", label="{BaseBlob|analyzer\lnp_extractor\lparser\lpos_tagger\lraw\lstring\lstripped\ltags\ltokenizer\ltranslator\l|classify()\lcorrect()\ldetect_language()\lngrams(n)\lnoun_phrases()\lnp_counts()\lparse(parser)\lpolarity()\lpos_tags()\lsentiment()\lsentiment_assessments()\lsplit(sep, maxsplit)\lsubjectivity()\ltokenize(tokenizer)\ltokens()\ltranslate(from_lang, to)\lword_counts()\lwords()\l}", shape="record", style="solid"];
"textblob.classifiers.BaseClassifier" [color="black", fontcolor="black", label="{BaseClassifier|feature_extractor\lformat_kwargs : dict\ltrain_features : NoneType\ltrain_set\l|classifier()\lclassify(text)\lextract_features(text)\llabels()\ltrain(labeled_featureset)\l}", shape="record", style="solid"];
"textblob.formats.BaseFormat" [color="black", fontcolor="black", label="{BaseFormat|\l|detect(stream)\lto_iterable()\l}", shape="record", style="solid"];
"textblob.base.BaseNPExtractor" [color="black", fontcolor="black", label="{BaseNPExtractor|\l|extract(text)\l}", shape="record", style="solid"];
"textblob.base.BaseParser" [color="black", fontcolor="black", label="{BaseParser|\l|parse(text)\l}", shape="record", style="solid"];
"textblob.base.BaseSentimentAnalyzer" [color="black", fontcolor="black", label="{BaseSentimentAnalyzer|kind : str\l|analyze(text)\ltrain()\l}", shape="record", style="solid"];
"textblob.base.BaseTagger" [color="black", fontcolor="black", label="{BaseTagger|\l|tag(text, tokenize)\l}", shape="record", style="solid"];
"textblob.base.BaseTokenizer" [color="black", fontcolor="black", label="{BaseTokenizer|\l|itokenize(text)\ltokenize(text)\l}", shape="record", style="solid"];
"textblob.mixins.BlobComparableMixin" [color="black", fontcolor="black", label="{BlobComparableMixin|\l|}", shape="record", style="solid"];
"textblob.blob.Blobber" [color="black", fontcolor="black", label="{Blobber|analyzer\lnp_extractor\lparser\lpos_tagger\ltokenizer\l|}", shape="record", style="solid"];
"textblob.formats.CSV" [color="black", fontcolor="black", label="{CSV|delimiter : str\l|}", shape="record", style="solid"];
"textblob.en.np_extractors.ChunkParser" [color="black", fontcolor="black", label="{ChunkParser|tagger : BigramTagger\l|parse(sentence)\ltrain()\l}", shape="record", style="solid"];
"textblob.mixins.ComparableMixin" [color="black", fontcolor="black", label="{ComparableMixin|\l|}", shape="record", style="solid"];
"textblob.en.np_extractors.ConllExtractor" [color="black", fontcolor="black", label="{ConllExtractor|CFG : dict\lINSIGNIFICANT_SUFFIXES : list\lPOS_TAGGER\lparser\l|extract(text)\l}", shape="record", style="solid"];
"textblob._text.Context" [color="black", fontcolor="black", label="{Context|path\l|append()\lapply(tokens)\lextend(rules)\linsert(i, tag1, tag2, cmd, x, y)\lload()\l}", shape="record", style="solid"];
"textblob.classifiers.DecisionTreeClassifier" [color="black", fontcolor="black", label="{DecisionTreeClassifier|nltk_class : DecisionTreeClassifier\lpprint\l|pretty_format()\lpseudocode()\l}", shape="record", style="solid"];
"textblob.formats.DelimitedFormat" [color="black", fontcolor="black", label="{DelimitedFormat|data\ldelimiter : str\l|detect(stream)\lto_iterable()\l}", shape="record", style="solid"];
"textblob.exceptions.DeprecationError" [color="black", fontcolor="red", label="{DeprecationError|\l|}", shape="record", style="solid"];
"textblob.unicodecsv.DictReader" [color="black", fontcolor="black", label="{DictReader|fieldnames\lreader\lunicode_fieldnames\lunicode_restkey : NoneType\l|next()\l}", shape="record", style="solid"];
"textblob.unicodecsv.DictWriter" [color="black", fontcolor="black", label="{DictWriter|encoding : str\lencoding_errors : str\lwriter\l|writeheader()\l}", shape="record", style="solid"];
"textblob._text.Entities" [color="black", fontcolor="black", label="{Entities|path\ltag : str\l|append(entity, name)\lapply(tokens)\lextend(entities)\lload()\l}", shape="record", style="solid"];
"textblob.en.np_extractors.FastNPExtractor" [color="black", fontcolor="black", label="{FastNPExtractor|CFG : dict\ltagger : BigramTagger\l|extract(sentence)\ltrain()\l}", shape="record", style="solid"];
"textblob.exceptions.FormatError" [color="black", fontcolor="red", label="{FormatError|\l|}", shape="record", style="solid"];
"textblob.formats.JSON" [color="black", fontcolor="black", label="{JSON|dict\l|detect(stream)\lto_iterable()\l}", shape="record", style="solid"];
"textblob._text.Lexicon" [color="black", fontcolor="black", label="{Lexicon|context\lentities\llanguage\lmorphology\lpath\l|load()\l}", shape="record", style="solid"];
"textblob.classifiers.MaxEntClassifier" [color="black", fontcolor="black", label="{MaxEntClassifier|nltk_class : MaxentClassifier\l|prob_classify(text)\l}", shape="record", style="solid"];
"textblob.exceptions.MissingCorpusError" [color="black", fontcolor="red", label="{MissingCorpusError|\l|}", shape="record", style="solid"];
"textblob._text.Morphology" [color="black", fontcolor="black", label="{Morphology|path\l|append()\lapply(token, previous, next)\lextend(rules)\linsert(i, tag, affix, cmd, tagged)\lload()\l}", shape="record", style="solid"];
"textblob.classifiers.NLTKClassifier" [color="black", fontcolor="black", label="{NLTKClassifier|classifier\lnltk_class : NoneType\ltrain_features\ltrain_set\l|accuracy(test_set, format)\lclassifier()\lclassify(text)\llabels()\ltrain()\lupdate(new_data)\l}", shape="record", style="solid"];
"textblob.en.taggers.NLTKTagger" [color="black", fontcolor="black", label="{NLTKTagger|\l|tag(text)\l}", shape="record", style="solid"];
"textblob.en.sentiments.NaiveBayesAnalyzer" [color="black", fontcolor="black", label="{NaiveBayesAnalyzer|RETURN_TYPE : Sentiment\lfeature_extractor\lkind : str\l|analyze(text)\ltrain()\l}", shape="record", style="solid"];
"textblob.classifiers.NaiveBayesClassifier" [color="black", fontcolor="black", label="{NaiveBayesClassifier|nltk_class : NaiveBayesClassifier\l|informative_features()\lprob_classify(text)\lshow_informative_features()\l}", shape="record", style="solid"];
"textblob.exceptions.NotTranslated" [color="black", fontcolor="red", label="{NotTranslated|\l|}", shape="record", style="solid"];
"textblob._text.Parser" [color="black", fontcolor="black", label="{Parser|default : tuple\llanguage : NoneType\llexicon : dict\l|find_chunks(tokens)\lfind_labels(tokens)\lfind_lemmata(tokens)\lfind_prepositions(tokens)\lfind_tags(tokens)\lfind_tokens(string)\lparse(s, tokenize, tags, chunks, relations, lemmata, encoding)\l}", shape="record", style="solid"];
"textblob.en.Parser" [color="black", fontcolor="black", label="{Parser|\l|find_lemmata(tokens)\lfind_tags(tokens)\l}", shape="record", style="solid"];
"textblob.en.sentiments.PatternAnalyzer" [color="black", fontcolor="black", label="{PatternAnalyzer|RETURN_TYPE : Sentiment\lkind : str\l|analyze(text, keep_assessments)\l}", shape="record", style="solid"];
"textblob.en.parsers.PatternParser" [color="black", fontcolor="black", label="{PatternParser|\l|parse(text)\l}", shape="record", style="solid"];
"textblob.en.taggers.PatternTagger" [color="black", fontcolor="black", label="{PatternTagger|\l|tag(text, tokenize)\l}", shape="record", style="solid"];
"textblob.classifiers.PositiveNaiveBayesClassifier" [color="black", fontcolor="black", label="{PositiveNaiveBayesClassifier|classifier : PositiveNaiveBayesClassifier\lfeature_extractor\lnltk_class : PositiveNaiveBayesClassifier\lpositive_features\lpositive_prob_prior : float\lpositive_set\lunlabeled_features\lunlabeled_set\l|train()\lupdate(new_positive_data, new_unlabeled_data, positive_prob_prior)\l}", shape="record", style="solid"];
"textblob._text.Rules" [color="black", fontcolor="black", label="{Rules|cmd : dict\llexicon : dict\l|apply(x)\l}", shape="record", style="solid"];
"textblob._text.Score" [color="black", fontcolor="black", label="{Score|assessments : list\l|}", shape="record", style="solid"];
"textblob.blob.Sentence" [color="black", fontcolor="black", label="{Sentence|dict\lend\lend_index\lstart : int\lstart_index : int\l|}", shape="record", style="solid"];
"textblob.tokenizers.SentenceTokenizer" [color="black", fontcolor="black", label="{SentenceTokenizer|\l|tokenize(text)\l}", shape="record", style="solid"];
"textblob._text.Sentiment" [color="black", fontcolor="black", label="{Sentiment|confidence\llabeler : dict\llanguage\lmodifier\lmodifiers\lnegations\lpath\ltokenizer\l|annotate(word, pos, polarity, subjectivity, intensity, label)\lassessments(words, negation)\lload(path)\lsynset(id, pos)\l}", shape="record", style="solid"];
"textblob.en.Sentiment" [color="black", fontcolor="black", label="{Sentiment|\l|load(path)\l}", shape="record", style="solid"];
"textblob._text.Spelling" [color="black", fontcolor="black", label="{Spelling|ALPHA : str\llanguage\lpath\l|load()\lsuggest(w)\ltrain(s, path)\l}", shape="record", style="solid"];
"textblob.mixins.StringlikeMixin" [color="black", fontcolor="black", label="{StringlikeMixin|ends_with\lstarts_with\l|endswith(suffix, start, end)\lfind(sub, start, end)\lformat()\lindex(sub, start, end)\ljoin(iterable)\llower()\lreplace(old, new, count)\lrfind(sub, start, end)\lrindex(sub, start, end)\lsplit(sep, maxsplit)\lstartswith(prefix, start, end)\lstrip(chars)\ltitle()\lupper()\l}", shape="record", style="solid"];
"textblob.formats.TSV" [color="black", fontcolor="black", label="{TSV|delimiter : str\l|}", shape="record", style="solid"];
"textblob._text.TaggedString" [color="black", fontcolor="black", label="{TaggedString|\l|split(sep)\l}", shape="record", style="solid"];
"textblob.blob.TextBlob" [color="black", fontcolor="black", label="{TextBlob|json\lraw_sentences\lserialized\l|sentences()\lto_json()\lwords()\l}", shape="record", style="solid"];
"textblob.exceptions.TextBlobError" [color="black", fontcolor="red", label="{TextBlobError|\l|}", shape="record", style="solid"];
"textblob.translate.Translator" [color="black", fontcolor="black", label="{Translator|headers : dict\lurl : str\l|detect(source, host, type_)\ltranslate(source, from_lang, to_lang, host, type_)\l}", shape="record", style="solid"];
"textblob.exceptions.TranslatorError" [color="black", fontcolor="red", label="{TranslatorError|\l|}", shape="record", style="solid"];
"textblob.unicodecsv.UnicodeReader" [color="black", fontcolor="black", label="{UnicodeReader|dialect\lencoding : str\lencoding_errors : str\lline_num\lreader\l|next()\l}", shape="record", style="solid"];
"textblob.unicodecsv.UnicodeWriter" [color="black", fontcolor="black", label="{UnicodeWriter|dialect\lencoding : str\lencoding_errors : str\lwriter\l|writerow(row)\lwriterows(rows)\l}", shape="record", style="solid"];
"textblob.blob.Word" [color="black", fontcolor="black", label="{Word|LancasterStemmer : LancasterStemmer\lPorterStemmer : PorterStemmer\lSnowballStemmer : SnowballStemmer\lpos_tag : NoneType\lstring\ltranslator\l|correct()\ldefine(pos)\ldefinitions()\ldetect_language()\lget_synsets(pos)\llemma()\llemmatize(pos)\lpluralize()\lsingularize()\lspellcheck()\lstem(stemmer)\lsynsets()\ltranslate(from_lang, to)\l}", shape="record", style="solid"];
"textblob.blob.WordList" [color="black", fontcolor="black", label="{WordList|\l|append(obj)\lcount(strg, case_sensitive)\lextend(iterable)\llemmatize()\llower()\lpluralize()\lsingularize()\lstem()\lupper()\l}", shape="record", style="solid"];
"textblob.tokenizers.WordTokenizer" [color="black", fontcolor="black", label="{WordTokenizer|\l|tokenize(text, include_punc)\l}", shape="record", style="solid"];
"textblob.decorators.cached_property" [color="black", fontcolor="black", label="{cached_property|func\l|}", shape="record", style="solid"];
"textblob._text.lazydict" [color="black", fontcolor="black", label="{lazydict|\l|get()\litems()\lkeys()\lload()\lpop()\lpopitem()\lsetdefault()\lupdate()\lvalues()\l}", shape="record", style="solid"];
"textblob._text.lazylist" [color="black", fontcolor="black", label="{lazylist|\l|append()\lextend()\linsert()\lload()\lpop()\lremove()\l}", shape="record", style="solid"];
"textblob.compat.with_metaclass.metaclass" [color="black", fontcolor="black", label="{metaclass|\l|}", shape="record", style="solid"];
"textblob._text.Context" -> "textblob._text.Rules" [arrowhead="empty", arrowtail="none"];
"textblob._text.Context" -> "textblob._text.lazylist" [arrowhead="empty", arrowtail="none"];
"textblob._text.Entities" -> "textblob._text.Rules" [arrowhead="empty", arrowtail="none"];
"textblob._text.Entities" -> "textblob._text.lazydict" [arrowhead="empty", arrowtail="none"];
"textblob._text.Lexicon" -> "textblob._text.lazydict" [arrowhead="empty", arrowtail="none"];
"textblob._text.Morphology" -> "textblob._text.Rules" [arrowhead="empty", arrowtail="none"];
"textblob._text.Morphology" -> "textblob._text.lazylist" [arrowhead="empty", arrowtail="none"];
"textblob._text.Sentiment" -> "textblob._text.lazydict" [arrowhead="empty", arrowtail="none"];
"textblob._text.Spelling" -> "textblob._text.lazydict" [arrowhead="empty", arrowtail="none"];
"textblob.blob.BaseBlob" -> "textblob.mixins.BlobComparableMixin" [arrowhead="empty", arrowtail="none"];
"textblob.blob.BaseBlob" -> "textblob.mixins.StringlikeMixin" [arrowhead="empty", arrowtail="none"];
"textblob.blob.Sentence" -> "textblob.blob.BaseBlob" [arrowhead="empty", arrowtail="none"];
"textblob.blob.TextBlob" -> "textblob.blob.BaseBlob" [arrowhead="empty", arrowtail="none"];
"textblob.classifiers.DecisionTreeClassifier" -> "textblob.classifiers.NLTKClassifier" [arrowhead="empty", arrowtail="none"];
"textblob.classifiers.MaxEntClassifier" -> "textblob.classifiers.NLTKClassifier" [arrowhead="empty", arrowtail="none"];
"textblob.classifiers.NLTKClassifier" -> "textblob.classifiers.BaseClassifier" [arrowhead="empty", arrowtail="none"];
"textblob.classifiers.NaiveBayesClassifier" -> "textblob.classifiers.NLTKClassifier" [arrowhead="empty", arrowtail="none"];
"textblob.classifiers.PositiveNaiveBayesClassifier" -> "textblob.classifiers.NLTKClassifier" [arrowhead="empty", arrowtail="none"];
"textblob.en.Parser" -> "textblob._text.Parser" [arrowhead="empty", arrowtail="none"];
"textblob.en.Sentiment" -> "textblob._text.Sentiment" [arrowhead="empty", arrowtail="none"];
"textblob.en.np_extractors.ConllExtractor" -> "textblob.base.BaseNPExtractor" [arrowhead="empty", arrowtail="none"];
"textblob.en.np_extractors.FastNPExtractor" -> "textblob.base.BaseNPExtractor" [arrowhead="empty", arrowtail="none"];
"textblob.en.parsers.PatternParser" -> "textblob.base.BaseParser" [arrowhead="empty", arrowtail="none"];
"textblob.en.sentiments.NaiveBayesAnalyzer" -> "textblob.base.BaseSentimentAnalyzer" [arrowhead="empty", arrowtail="none"];
"textblob.en.sentiments.PatternAnalyzer" -> "textblob.base.BaseSentimentAnalyzer" [arrowhead="empty", arrowtail="none"];
"textblob.en.taggers.NLTKTagger" -> "textblob.base.BaseTagger" [arrowhead="empty", arrowtail="none"];
"textblob.en.taggers.PatternTagger" -> "textblob.base.BaseTagger" [arrowhead="empty", arrowtail="none"];
"textblob.exceptions.DeprecationError" -> "textblob.exceptions.TextBlobError" [arrowhead="empty", arrowtail="none"];
"textblob.exceptions.FormatError" -> "textblob.exceptions.TextBlobError" [arrowhead="empty", arrowtail="none"];
"textblob.exceptions.MissingCorpusError" -> "textblob.exceptions.TextBlobError" [arrowhead="empty", arrowtail="none"];
"textblob.exceptions.NotTranslated" -> "textblob.exceptions.TranslatorError" [arrowhead="empty", arrowtail="none"];
"textblob.exceptions.TranslatorError" -> "textblob.exceptions.TextBlobError" [arrowhead="empty", arrowtail="none"];
"textblob.formats.CSV" -> "textblob.formats.DelimitedFormat" [arrowhead="empty", arrowtail="none"];
"textblob.formats.DelimitedFormat" -> "textblob.formats.BaseFormat" [arrowhead="empty", arrowtail="none"];
"textblob.formats.JSON" -> "textblob.formats.BaseFormat" [arrowhead="empty", arrowtail="none"];
"textblob.formats.TSV" -> "textblob.formats.DelimitedFormat" [arrowhead="empty", arrowtail="none"];
"textblob.mixins.BlobComparableMixin" -> "textblob.mixins.ComparableMixin" [arrowhead="empty", arrowtail="none"];
"textblob.tokenizers.SentenceTokenizer" -> "textblob.base.BaseTokenizer" [arrowhead="empty", arrowtail="none"];
"textblob.tokenizers.WordTokenizer" -> "textblob.base.BaseTokenizer" [arrowhead="empty", arrowtail="none"];
"textblob._text.Context" -> "textblob._text.Lexicon" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="context", style="solid"];
"textblob._text.Entities" -> "textblob._text.Lexicon" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="entities", style="solid"];
"textblob._text.Morphology" -> "textblob._text.Lexicon" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="morphology", style="solid"];
"textblob.en.np_extractors.ChunkParser" -> "textblob.en.np_extractors.ConllExtractor" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="parser", style="solid"];
"textblob.en.np_extractors.FastNPExtractor" -> "textblob.blob.BaseBlob" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="np_extractor", style="solid"];
"textblob.en.np_extractors.FastNPExtractor" -> "textblob.blob.Blobber" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="np_extractor", style="solid"];
"textblob.en.parsers.PatternParser" -> "textblob.blob.BaseBlob" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="parser", style="solid"];
"textblob.en.parsers.PatternParser" -> "textblob.blob.Blobber" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="parser", style="solid"];
"textblob.en.sentiments.PatternAnalyzer" -> "textblob.blob.BaseBlob" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="analyzer", style="solid"];
"textblob.en.sentiments.PatternAnalyzer" -> "textblob.blob.Blobber" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="analyzer", style="solid"];
"textblob.en.taggers.NLTKTagger" -> "textblob.blob.BaseBlob" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="pos_tagger", style="solid"];
"textblob.en.taggers.NLTKTagger" -> "textblob.blob.Blobber" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="pos_tagger", style="solid"];
"textblob.en.taggers.PatternTagger" -> "textblob.en.np_extractors.ConllExtractor" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="POS_TAGGER", style="solid"];
"textblob.tokenizers.WordTokenizer" -> "textblob.blob.BaseBlob" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="tokenizer", style="solid"];
"textblob.tokenizers.WordTokenizer" -> "textblob.blob.Blobber" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="tokenizer", style="solid"];
"textblob.translate.Translator" -> "textblob.blob.BaseBlob" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="translator", style="solid"];
"textblob.translate.Translator" -> "textblob.blob.Word" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="translator", style="solid"];
"textblob.unicodecsv.UnicodeReader" -> "textblob.unicodecsv.DictReader" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="reader", style="solid"];
"textblob.unicodecsv.UnicodeWriter" -> "textblob.unicodecsv.DictWriter" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="writer", style="solid"];
}
